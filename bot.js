import TelegramBot from 'node-telegram-bot-api';
import axios from 'axios';
import Imap from 'imap';
import { simpleParser } from 'mailparser';
import express from 'express';
import config from './config.js';
import { connect, emails, users } from './db.js';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
connect().then(() => {
  console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB —É—Å–ø–µ—à–Ω–∞');
}).catch(e => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', e);
});

// –°–æ–∑–¥–∞–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–µ–±—Ö—É–∫–∞
const app = express();
const PORT = process.env.PORT || 3000;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(config.telegramToken, { 
  polling: false // –û—Ç–∫–ª—é—á–∞–µ–º polling –¥–ª—è –≤–µ–±—Ö—É–∫–∞
});
const CRYPTOBOT_API_TOKEN = config.cryptoBotToken;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ IMAP –¥–ª—è iCloud
const imapConfig = {
  user: config.imap.user,
  password: config.imap.password,
  host: config.imap.host,
  port: config.imap.port,
  tls: config.imap.tls,
  tlsOptions: { rejectUnauthorized: false }
};

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON
app.use(express.json());

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–∞
app.post(`/webhook`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

// Health check —ç–Ω–¥–ø–æ–∏–Ω—Ç
app.get('/', (req, res) => {
  res.send('UBT TikTok Bot is running!');
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
function isAdmin(userId) {
  return userId === config.adminId;
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–¥–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–∏—Å—å–º–∞ (—Ç–æ–ª—å–∫–æ TikTok –∏ TikTok Studio)
function getCodeFromText(text, subject) {
  const textLower = text.toLowerCase();
  const subjectLower = subject?.toLowerCase() || '';
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∏—Å—å–º–æ –æ—Ç TikTok (–≤–∫–ª—é—á–∞—è TikTok Studio)
  const isTikTok = textLower.includes('tiktok') || 
                   textLower.includes('—Ç–∏–∫—Ç–æ–∫') || 
                   textLower.includes('—Ç–∏–∫-—Ç–æ–∫') ||
                   subjectLower.includes('tiktok') ||
                   subjectLower.includes('—Ç–∏–∫—Ç–æ–∫') ||
                   subjectLower.includes('—Ç–∏–∫-—Ç–æ–∫') ||
                   textLower.includes('tiktok studio') ||
                   subjectLower.includes('tiktok studio');

  if (!isTikTok) return null;

  // –ò—â–µ–º –∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 4-8 —Ü–∏—Ñ—Ä
  const codeMatch = text.match(/\b\d{4,8}\b/);
  if (!codeMatch) return null;

  return codeMatch[0];
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–¥–∞ –≤ –ø–∏—Å—å–º–∞—Ö
async function getLatestCode(targetEmail) {
  return new Promise((resolve, reject) => {
    const imap = new Imap(imapConfig);
    let foundCode = null;
    let processedCount = 0;

    imap.once('ready', () => {
      imap.openBox('INBOX', false, (err) => {
        if (err) {
          console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è INBOX:', err);
          imap.end();
          return reject(err);
        }

        // –ò—â–µ–º –ø–∏—Å—å–º–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ (–Ω–µ —Ç–æ–ª—å–∫–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ)
        const searchCriteria = ['ALL', ['SINCE', new Date(Date.now() - 24 * 60 * 60 * 1000)]];
        
        imap.search(searchCriteria, (err, results) => {
          if (err) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∏—Å–µ–º:', err);
            imap.end();
            return reject(err);
          }

          if (!results || results.length === 0) {
            console.log('–ü–∏—Å–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            imap.end();
            return resolve(null);
          }

          console.log(`–ù–∞–π–¥–µ–Ω–æ ${results.length} –ø–∏—Å–µ–º, –ø—Ä–æ–≤–µ—Ä—è–µ–º...`);
          const fetchOptions = { bodies: ['HEADER.FIELDS (FROM TO SUBJECT)', 'TEXT'] };
          const fetch = imap.fetch(results.slice(-20), fetchOptions); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ø–∏—Å–µ–º

          fetch.on('message', (msg) => {
            let headers = '';
            let text = '';
            let subject = '';

            msg.on('body', (stream, info) => {
              let buffer = '';
              stream.on('data', (chunk) => {
                buffer += chunk.toString('utf8');
              });
              stream.on('end', () => {
                if (info.which === 'HEADER.FIELDS (FROM TO SUBJECT)') {
                  headers = buffer;
                  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–º—É –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                  const subjectMatch = headers.match(/^Subject:\s*(.*?)\r?\n/im);
                  subject = subjectMatch ? subjectMatch[1] : '';
                } else if (info.which === 'TEXT') {
                  text = buffer;
                }
              });
            });

            msg.once('end', async () => {
              processedCount++;
              try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∏—Å—å–º–æ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –Ω–∞—à–µ–º—É email
                const toMatch = headers.match(/^To:\s*(.*?)\r?\n/im);
                const to = toMatch ? toMatch[1] : '';
                
                if (to.includes(targetEmail)) {
                  console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∏—Å—å–º–æ —Å —Ç–µ–º–æ–π: "${subject}"`);
                  const code = getCodeFromText(text, subject);
                  if (code) {
                    console.log(`–ù–∞–π–¥–µ–Ω –∫–æ–¥: ${code}`);
                    foundCode = code;
                  }
                }
              } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞:', e);
              }

              // –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –≤—Å–µ –ø–∏—Å—å–º–∞ –∏ –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
              if (processedCount === Math.min(results.length, 20)) {
                imap.end();
                resolve(foundCode);
              }
            });
          });

          fetch.once('error', (err) => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏—Å–µ–º:', err);
            imap.end();
            reject(err);
          });

          fetch.once('end', () => {
            console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏—Å–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            if (!foundCode) {
              imap.end();
              resolve(null);
            }
          });
        });
      });
    });

    imap.once('error', (err) => {
      console.error('IMAP –æ—à–∏–±–∫–∞:', err);
      reject(err);
    });

    imap.connect();
  });
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
async function sendMainMenu(chatId, deletePrevious = false) {
  const emailsCount = await (await emails()).countDocuments();
  
  const welcomeText = `üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –±–æ—Ç–µ, —Å–¥–µ–ª–∞–Ω–Ω–æ–º –ø–æ–¥ UBT –¥–ª—è —Å–ø"–º–∞ Tik Tok!</b>\n\n` +
    `<b>–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ:</b>\n` +
    `‚Ä¢ –ö—É–ø–∏—Ç—å –ø–æ—á—Ç—É –ø–æ –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–µ\n` +
    `‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –ø–æ—á—Ç—ã Tik Tok (–¢–û–õ–¨–ö–û ICLOUD, –ò –¢–û–õ–¨–ö–û –¢–ï –ö–û–¢–û–†–´–ï –ö–£–ü–õ–ï–ù–ù–´–ï –£ –ù–ê–°)\n` +
    `‚Ä¢ –°–∫–æ—Ä–æ –¥–æ–±–≤–∏–º –µ—â–µ —Ä–∞–∑–Ω—ã–µ –ø–æ—á—Ç—ã –∏ –∞–∫–∫–∞—É–Ω—Ç—ã\n` +
    `‚Ä¢ –í –±—É–¥—É—â–µ–º - –ø–æ–ª—É—á–∏—Ç—å —Å–≤—è–∑–∫—É –∑–∞–ª–∏–≤–∞ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π\n\n` +
    `‚ö†Ô∏è –ë–æ—Ç –Ω–æ–≤—ã–π, –≤–æ–∑–º–æ–∂–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–±–æ–∏\n\n` +
    `üéâ <b>–ê–∫—Ü–∏—è!</b> –î–æ 11.06 –ø–æ—á—Ç—ã –≤—Å–µ–≥–æ –ø–æ 4 —Ä—É–±–ª—è! üò±`;

  const options = {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: [
        [{ text: `‚≠êÔ∏è –ü–û–ß–¢–´ ICLOUD (${emailsCount}—à—Ç) ‚≠êÔ∏è`, callback_data: 'emails_category' }],
        [{ text: 'üõí –ú–û–ò –ü–û–ß–¢–´ üõí', callback_data: 'my_purchases' }],
        [{ text: 'üÜò –ü–û–î–î–ï–†–ñ–ö–ê üÜò', callback_data: 'support' }]
      ]
    }
  };

  if (deletePrevious) {
    bot.sendMessage(chatId, '‚åõ –û–±–Ω–æ–≤–ª—è—é –º–µ–Ω—é...').then(msg => {
      setTimeout(() => bot.deleteMessage(chatId, msg.message_id), 300);
    });
  }

  return bot.sendMessage(chatId, welcomeText, options);
}

// –ú–µ–Ω—é –ø–æ—á—Ç iCloud —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
async function sendEmailsMenu(chatId) {
  const emailsCount = await (await emails()).countDocuments();
  
  const text = `üìß <b>–ü–û–ß–¢–´ ICLOUD (${emailsCount}—à—Ç) üìß</b>\n\n` +
  `<b>–í –¥–∞–Ω–Ω–æ–º –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ:</b>\n` +
  `‚úÖ ‚Ä¢ –ü–æ–∫—É–ø–∞—Ç—å –ø–æ—á—Ç—ã\n` +
  `‚úÖ ‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –∫–æ–¥—ã –æ—Ç –ø–æ—á—Ç\n` +
    `üéâ <b>–ê–∫—Ü–∏—è!</b> –î–æ 11.06 –ø–æ—á—Ç—ã –≤—Å–µ–≥–æ –ø–æ 4 —Ä—É–±–ª—è! üò±`;
    ` <b>–í—ã–±–∏—Ä–∏—Ç–µ –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–∞—Å—Ç—å</b>`;

  const options = {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üí∞ –ö–£–ü–ò–¢–¨ –ü–û–ß–¢–£ üí∞', callback_data: 'buy_email' }],
        [{ text: 'üîë –ü–û–õ–£–ß–ò–¢–¨ –ö–û–î üîë', callback_data: 'get_code' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥ üîô', callback_data: 'back_to_main' }]
      ]
    }
  };

  return bot.sendMessage(chatId, text, options);
}

// –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—á—Ç
async function sendQuantityMenu(chatId) {
  const availableCount = await (await emails()).countDocuments();
  const maxAvailable = Math.min(availableCount, 10);
  
  const quantityButtons = [];
  for (let i = 1; i <= maxAvailable; i++) {
    quantityButtons.push({ text: `${i}`, callback_data: `quantity_${i}` });
  }
  
  const rows = [];
  for (let i = 0; i < quantityButtons.length; i += 5) {
    rows.push(quantityButtons.slice(i, i + 5));
  }
  
  rows.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_emails_menu' }]);

  const text = `üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—á—Ç, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏</b>\n\n` +
    `–î–æ—Å—Ç—É–ø–Ω–æ: <b>${maxAvailable}</b> –ø–æ—á—Ç\n` +
    `–¶–µ–Ω–∞: <b>4 –†—É–±–ª—è</b> –∑–∞ 1 –ø–æ—á—Ç—É`;

  const options = {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: rows
    }
  };

  return bot.sendMessage(chatId, text, options);
}

// –ú–µ–Ω—é –æ–ø–ª–∞—Ç—ã
async function sendPaymentMenu(chatId, invoiceUrl, quantity) {
  const totalAmount = (0.052 * quantity).toFixed(2);
  
  const text = `üí≥ <b>–û–ø–ª–∞—Ç–∞ ${quantity} –ø–æ—á—Ç(—ã)</b>\n\n` +
    `–°—É–º–º–∞: <b>${totalAmount} USDT</b>\n\n` +
    `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:`;

  const options = {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: [
        [{ text: '‚úÖ –û–ü–õ–ê–¢–ò–¢–¨ –ß–ï–†–ï–ó CRYPTOBOT', url: invoiceUrl }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_quantity_menu' }]
      ]
    }
  };

  return bot.sendMessage(chatId, text, options);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
async function createInvoice(userId, quantity) {
  try {
    const transactionId = `buy_${userId}_${Date.now()}`;
    const amount = 0.052 * quantity;
    
    const response = await axios.post('https://pay.crypt.bot/api/createInvoice', {
      asset: 'USDT',
      amount: amount,
      description: `–ü–æ–∫—É–ø–∫–∞ ${quantity} –ø–æ—á—Ç iCloud`,
      hidden_message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!',
      paid_btn_name: 'openBot',
      paid_btn_url: 'https://t.me/ubtshope_bot',
      payload: transactionId
    }, {
      headers: {
        'Crypto-Pay-API-Token': CRYPTOBOT_API_TOKEN,
        'Content-Type': 'application/json'
      }
    });

    const usersCollection = await users();
    await usersCollection.updateOne(
      { user_id: userId },
      { 
        $setOnInsert: { user_id: userId, emails: [] },
        $set: { [`transactions.${transactionId}`]: {
          invoiceId: response.data.result.invoice_id,
          quantity: quantity,
          status: 'pending',
          timestamp: Date.now()
        }}
      },
      { upsert: true }
    );

    return response.data.result.pay_url;
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞:', err.response?.data || err.message);
    return null;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
async function checkPayment(invoiceId) {
  try {
    const response = await axios.get(`https://pay.crypt.bot/api/getInvoices?invoice_ids=${invoiceId}`, {
      headers: {
        'Crypto-Pay-API-Token': CRYPTOBOT_API_TOKEN
      }
    });
    
    return response.data.result.items[0];
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã:', err);
    return null;
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
async function handleSuccessfulPayment(userId, transactionId) {
  const usersCollection = await users();
  const emailsCollection = await emails();
  
  const user = await usersCollection.findOne({ user_id: userId });
  if (!user || !user.transactions || !user.transactions[transactionId]) {
    return false;
  }

  const quantity = user.transactions[transactionId].quantity;
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ—á—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
  const emailsToSell = await emailsCollection.aggregate([
    { $sample: { size: quantity } }
  ]).toArray();
  
  if (emailsToSell.length < quantity) {
    await usersCollection.updateOne(
      { user_id: userId },
      { $set: { [`transactions.${transactionId}.status`]: 'failed' } }
    );
    
    await bot.sendMessage(userId, 
      `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ—á—Ç –≤ –ø—É–ª–µ\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @igor_Potekov`,
      { parse_mode: 'HTML' });
    return false;
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await usersCollection.updateOne(
    { user_id: userId },
    {
      $push: { emails: { $each: emailsToSell.map(e => e.email) } },
      $set: { 
        [`transactions.${transactionId}.status`]: 'completed',
        [`transactions.${transactionId}.emails`]: emailsToSell.map(e => e.email)
      }
    }
  );

  // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ –ø–æ—á—Ç—ã
  await emailsCollection.deleteMany({
    email: { $in: emailsToSell.map(e => e.email) }
  });

  await bot.sendMessage(userId,
    `üéâ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n–í–∞—à–∏ –ø–æ—á—Ç—ã:\n${emailsToSell.map(e => e.email).join('\n')}`,
    { parse_mode: 'HTML' });

  return true;
}

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
setInterval(async () => {
  try {
    const usersCollection = await users();
    const usersWithTransactions = await usersCollection.find({
      "transactions": { $exists: true }
    }).toArray();

    for (const user of usersWithTransactions) {
      for (const [transactionId, transaction] of Object.entries(user.transactions)) {
        if (transaction.status === 'pending' && transaction.invoiceId) {
          const invoice = await checkPayment(transaction.invoiceId);
          
          if (invoice?.status === 'paid') {
            await handleSuccessfulPayment(user.user_id, transactionId);
          } else if (invoice?.status === 'expired') {
            await usersCollection.updateOne(
              { user_id: user.user_id },
              { $set: { [`transactions.${transactionId}.status`]: 'expired' } }
            );
          }
        }
      }
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π:', err);
  }
}, 20000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥

// –ú–µ–Ω—é –º–æ–∏—Ö –ø–æ–∫—É–ø–æ–∫
async function sendMyPurchasesMenu(chatId) {
  const usersCollection = await users();
  const user = await usersCollection.findOne({ user_id: chatId });
  
  if (!user || !user.emails || user.emails.length === 0) {
    return bot.sendMessage(chatId, 
      '‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫.\n' +
      '–ù–∞–∂–º–∏—Ç–µ "üìß –ü–û–ß–¢–´ ICLOUD" —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø–æ–∫—É–ø–∫—É', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üìß –ü–û–ß–¢–´ ICLOUD', callback_data: 'emails_category' }],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
        ]
      }
    });
  }
  
  const buttons = user.emails.map(email => [{ text: email, callback_data: `email_${email}` }]);
  buttons.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]);
  
  return bot.sendMessage(chatId, 'üì¶ <b>–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:</b>', {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: buttons
    }
  });
}

// –ú–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏
async function sendSupportMenu(chatId) {
  return bot.sendMessage(chatId, 
    'üõ†Ô∏è <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n' +
    '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É:\n' +
    '@igor_Potekov\n\n' +
    '–ú—ã —Ä–µ—à–∏–º –ª—é–±—É—é –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É!', {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
      ]
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;
  
  try {
    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if (data === 'back_to_main') {
      await bot.deleteMessage(chatId, callbackQuery.message.message_id);
      return sendMainMenu(chatId);
    }
    
    // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ—á—Ç
    if (data === 'emails_category') {
      await bot.deleteMessage(chatId, callbackQuery.message.message_id);
      return sendEmailsMenu(chatId);
    }
    
    // –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é –ø–æ—á—Ç
    if (data === 'back_to_emails_menu') {
      await bot.deleteMessage(chatId, callbackQuery.message.message_id);
      return sendEmailsMenu(chatId);
    }
    
    // –ö—É–ø–∏—Ç—å –ø–æ—á—Ç—É
    if (data === 'buy_email') {
      const emailsCount = await (await emails()).countDocuments();
      if (emailsCount === 0) {
        return bot.answerCallbackQuery(callbackQuery.id, {
          text: '–ü–æ—á—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
          show_alert: true
        });
      }
      
      await bot.deleteMessage(chatId, callbackQuery.message.message_id);
      return sendQuantityMenu(chatId);
    }
    
    // –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    if (data.startsWith('quantity_')) {
      const quantity = parseInt(data.split('_')[1]);
      const invoiceUrl = await createInvoice(chatId, quantity);
      
      if (!invoiceUrl) {
        return bot.answerCallbackQuery(callbackQuery.id, {
          text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
          show_alert: true
        });
      }
      
      await bot.deleteMessage(chatId, callbackQuery.message.message_id);
      await sendPaymentMenu(chatId, invoiceUrl, quantity);
      return bot.answerCallbackQuery(callbackQuery.id);
    }
    
    // –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    if (data === 'back_to_quantity_menu') {
      await bot.deleteMessage(chatId, callbackQuery.message.message_id);
      return sendQuantityMenu(chatId);
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥
    if (data === 'get_code') {
      const usersCollection = await users();
      const user = await usersCollection.findOne({ user_id: chatId });
      
      if (!user || !user.emails || user.emails.length === 0) {
        return bot.answerCallbackQuery(callbackQuery.id, {
          text: '–£ –≤–∞—Å –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø–æ—á—Ç. –°–Ω–∞—á–∞–ª–∞ –∫—É–ø–∏—Ç–µ –ø–æ—á—Ç—É.',
          show_alert: true
        });
      }
      
      await bot.deleteMessage(chatId, callbackQuery.message.message_id);
      return sendMyPurchasesMenu(chatId);
    }
    
    // –í—ã–±–æ—Ä –ø–æ—á—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞
    if (data.startsWith('email_')) {
      const email = data.replace('email_', '');
      
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: `–ò—â–µ–º –∫–æ–¥ –¥–ª—è –ø–æ—á—Ç—ã ${email}...`,
        show_alert: false
      });
      
      try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ –∫–æ–¥–∞
        const searchMsg = await bot.sendMessage(chatId, 
          `üîç <b>–ò—â–µ–º –∫–æ–¥ TikTok –¥–ª—è</b> <code>${email}</code>\n\n` +
          `–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥...`, {
          parse_mode: 'HTML'
        });
        
        const code = await getLatestCode(email);
        
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
        await bot.deleteMessage(chatId, searchMsg.message_id);
        
        if (code) {
          await bot.sendMessage(chatId, 
            `‚úÖ <b>–ö–æ–¥ TikTok –¥–ª—è</b> <code>${email}</code>\n\n` +
            `üîë <b>–í–∞—à –∫–æ–¥:</b> <code>${code}</code>\n\n` +
            `‚ö†Ô∏è <i>–ù–∏–∫–æ–º—É –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥!</i>`, {
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
              ]
            }
          });
        } else {
          await bot.sendMessage(chatId, 
            `‚ùå <b>–ö–æ–¥ TikTok –Ω–µ –Ω–∞–π–¥–µ–Ω</b> –¥–ª—è <code>${email}</code>\n\n` +
            `–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n` +
            `1. –ü–∏—Å—å–º–æ —Å –∫–æ–¥–æ–º –µ—â–µ –Ω–µ –ø—Ä–∏—à–ª–æ (–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω—É—Ç—ã)\n` +
            `2. –ü–∏—Å—å–º–æ –ø–æ–ø–∞–ª–æ –≤ —Å–ø–∞–º\n` +
            `3. –ö–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω`, {
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: `email_${email}` }],
                [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
              ]
            }
          });
        }
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–∞:', e);
        await bot.sendMessage(chatId, 
         `‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–∞</b>\n\n` +
          `${e.message}\n\n` +
          `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É`, {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'support' }],
              [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
            ]
          }
        });
      }
      return;
    }
    
    // –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏
    if (data === 'my_purchases') {
      await bot.deleteMessage(chatId, callbackQuery.message.message_id);
      return sendMyPurchasesMenu(chatId);
    } 
    
    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞
    if (data === 'support') {
      await bot.deleteMessage(chatId, callbackQuery.message.message_id);
      return sendSupportMenu(chatId);
    }
    
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback:', err);
    bot.answerCallbackQuery(callbackQuery.id, {
      text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
      show_alert: true
    });
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  sendMainMenu(chatId);
});

// –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—á—Ç
bot.onText(/\/add_emails (.+)/, async (msg, match) => {
  if (!isAdmin(msg.from.id)) return;

  const emailsCollection = await emails();
  const newEmails = match[1].split(',').map(e => e.trim()).filter(e => e);
  
  const result = await emailsCollection.insertMany(
    newEmails.map(email => ({ email })),
    { ordered: false }
  );
  
  const count = await emailsCollection.countDocuments();
  bot.sendMessage(msg.chat.id, 
    `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${result.insertedCount}\nüìä –í—Å–µ–≥–æ –ø–æ—á—Ç: ${count}`);
});

// –°—Ç–∞—Ç—É—Å –ø—É–ª–∞
bot.onText(/\/pool_status/, async (msg) => {
  if (!isAdmin(msg.from.id)) return;

  const emailsCollection = await emails();
  const count = await emailsCollection.countDocuments();
  const first50 = await emailsCollection.find().limit(50).toArray();
  
  let message = `üìä –í—Å–µ–≥–æ –ø–æ—á—Ç: ${count}\n\n`;
  message += first50.map(e => e.email).join('\n');
  
  if (count > 50) message += '\n\n...–∏ –¥—Ä—É–≥–∏–µ (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 50)';
  
  bot.sendMessage(msg.chat.id, message);
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ
bot.onText(/\/db_status/, async (msg) => {
  if (!isAdmin(msg.from.id)) return;
  
  try {
    const db = await connect();
    const stats = await db.command({ dbStats: 1 });
    const emailCount = await (await emails()).countDocuments();
    
    bot.sendMessage(msg.chat.id, 
      `üõ†Ô∏è <b>–°—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>\n\n` +
      `‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ\n` +
      `üìä –†–∞–∑–º–µ—Ä –±–∞–∑—ã: ${(stats.dataSize / 1024).toFixed(2)} KB\n` +
      `üìß –ü–æ—á—Ç–æ–≤ –≤ –ø—É–ª–µ: ${emailCount}\n` +
      `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${await (await users()).countDocuments()}`,
      { parse_mode: 'HTML' });
  } catch (e) {
    bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${e.message}`);
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –±–æ—Ç–∞
(async () => {
  try {
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–∞ Render
    if (process.env.RENDER_EXTERNAL_URL) {
      const webhookUrl = `${process.env.RENDER_EXTERNAL_URL}/webhook`;
      await bot.setWebHook(webhookUrl);
      console.log(`Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`);
    } else {
      console.log('Running in development mode');
    }

    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    app.listen(PORT, () => {
      console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log('üíé –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', err);
    process.exit(1);
  }
})();