import TelegramBot from 'node-telegram-bot-api';
import axios from 'axios';
import Imap from 'imap';
import { simpleParser } from 'mailparser';
import express from 'express';
import config from './config.js';
import { connect, emails, users, firstmails } from './db.js';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
connect().then(() => {
  console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB —É—Å–ø–µ—à–Ω–∞');
}).catch(e => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', e);
});

// –°–æ–∑–¥–∞–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–µ–±—Ö—É–∫–∞
const app = express();
const PORT = process.env.PORT || 3000;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(config.telegramToken, { 
  polling: false // –û—Ç–∫–ª—é—á–∞–µ–º polling –¥–ª—è –≤–µ–±—Ö—É–∫–∞
});
const CRYPTOBOT_API_TOKEN = config.cryptoBotToken;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ IMAP –¥–ª—è iCloud
const imapConfig = {
  user: config.imap.user,
  password: config.imap.password,
  host: config.imap.host,
  port: config.imap.port,
  tls: config.imap.tls,
  tlsOptions: { rejectUnauthorized: false }
};

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON
app.use(express.json());

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–∞
app.post(`/webhook`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

// Health check —ç–Ω–¥–ø–æ–∏–Ω—Ç
app.get('/', (req, res) => {
  res.send('UBT TikTok Bot is running!');
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
function isAdmin(userId) {
  return userId === config.adminId;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
function generateReferralLink(userId) {
  return `https://t.me/${config.botUsername}?start=ref_${userId}`;
}

// /start —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∫–æ–π, –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø–æ referrals –∏ last_seen, –±–æ–Ω—É—Å—ã –∏ —Å–∫–∏–¥–∫–∞
bot.onText(/\/start(?: (.+))?/, async (msg, match) => {
  const chatId = msg.chat.id;
  const startPayload = match[1];

  const usersCollection = await users();

  // 1. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Å–µ–≥–¥–∞ –º–∞—Å—Å–∏–≤ referrals (–∏ –ø—Ä–æ—á–∏–µ –ø–æ–ª—è)
  await usersCollection.updateOne(
    { user_id: chatId },
    {
      $setOnInsert: {
        user_id: chatId,
        username: msg.from.username || '',
        first_name: msg.from.first_name || '',
        last_name: msg.from.last_name || '',
        first_seen: new Date(),
        emails: [],
        firstmails: [],
        referrals: [],
        hasDiscount: false,
        hasUkBundle: false,
        canGetUkBundle: false
      }
    },
    { upsert: true }
  );
  // last_seen –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º!
  await usersCollection.updateOne(
    { user_id: chatId },
    { $set: { last_seen: new Date() } }
  );

  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å–ª–∏ –±—ã–ª startPayload ‚Äî —ç—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞, –∏ –æ–Ω –Ω–µ —Å–∞–º —Å–µ–±—è –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç
  if (startPayload && startPayload.startsWith('ref_')) {
    const referrerId = parseInt(startPayload.replace('ref_', ''));
    if (referrerId && referrerId !== chatId) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–∞–ª—å–Ω–æ –Ω–æ–≤—ã–π (–Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π)
      const currentUser = await usersCollection.findOne({ user_id: chatId });
      if (currentUser && !currentUser.invitedBy) {
        // –î–æ–±–∞–≤–ª—è–µ–º chatId –≤ –º–∞—Å—Å–∏–≤ referrals —Ä–µ—Ñ–µ—Ä–µ—Ä–∞, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        await usersCollection.updateOne(
          { user_id: referrerId },
          { $addToSet: { referrals: chatId } }
        );
        // –ü–æ–º–µ—á–∞–µ–º –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª (—á—Ç–æ–±—ã –Ω–µ –∑–∞—Å—á–∏—Ç–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ)
        await usersCollection.updateOne(
          { user_id: chatId },
          { $set: { invitedBy: referrerId } }
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Ç–µ–ø–µ—Ä—å —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const referrer = await usersCollection.findOne({ user_id: referrerId });
        const referralsCount = (referrer.referrals || []).length;

        // –ï—Å–ª–∏ —Å—Ç–∞–ª–æ >= 5 ‚Äî —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ —Å–∫–∏–¥–∫–∏
        if (referralsCount >= 5 && !referrer.hasDiscount) {
          await usersCollection.updateOne(
            { user_id: referrerId },
            { $set: { hasDiscount: true } }
          );
        }
        // –ï—Å–ª–∏ —Å—Ç–∞–ª–æ >= 10 ‚Äî —Ñ–ª–∞–≥ –¥–ª—è —Å–≤—è–∑–∫–∏
        if (referralsCount >= 10 && !referrer.canGetUkBundle) {
          await usersCollection.updateOne(
            { user_id: referrerId },
            { $set: { canGetUkBundle: true } }
          );
        }

        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        try {
          await bot.sendMessage(referrerId,
            `üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!\n` +
            `üë§ @${msg.from.username || '–±–µ–∑ username'}\n` +
            `üÜî ID: ${chatId}\n` +
            `–¢–µ–ø–µ—Ä—å —É –≤–∞—Å: ${referralsCount} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤`
          );
        } catch (e) {}
      }
    }
  }

  // ... –¥–∞–ª–µ–µ –≤—ã–∑–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ...
  await sendMainMenu(chatId);
});

// --- –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ ---

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
async function sendMainMenu(chatId, deletePrevious = false) {
  const emailsCount = await (await emails()).countDocuments();
  const firstmailCount = await (await firstmails()).countDocuments();

  const usersCollection = await users();
  await usersCollection.updateOne(
    { user_id: chatId },
    { $setOnInsert: { user_id: chatId, emails: [], firstmails: [], first_seen: new Date(), referrals: [], hasDiscount: false, hasUkBundle: false, canGetUkBundle: false } },
    { upsert: true }
  );

  const welcomeText = `üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –±–æ—Ç–µ, —Å–¥–µ–ª–∞–Ω–Ω–æ–º –ø–æ–¥ UBT –¥–ª—è —Å–ø–∞–º–∞ TikTok!</b>\n\n` +
    `<b>–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ:</b>\n` +
    `‚Ä¢ –ö—É–ø–∏—Ç—å –ø–æ—á—Ç—É –ø–æ –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–µ\n` +
    `‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –ø–æ—á—Ç—ã TikTok (–¢–û–õ–¨–ö–û ICLOUD, –∏ —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –∫—É–ø–ª–µ–Ω—ã —É –Ω–∞—Å)\n` +
    `‚Ä¢ –ö—É–ø–∏—Ç—å –ø–æ—á—Ç—É FIRSTMAIL –¥–ª—è —Å–ø–∞–º–∞ (–≤—ã–¥–∞–µ—Ç—Å—è –∫–∞–∫ email:password)\n` +
    `‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã\n` +
    `‚Ä¢ –í –±—É–¥—É—â–µ–º ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–≤—è–∑–∫—É –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π\n\n` +
    `‚ö†Ô∏è –ë–æ—Ç –Ω–æ–≤—ã–π, –≤–æ–∑–º–æ–∂–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–±–æ–∏\n\n` +
    `üéâ <b>–°–ö–û–†–û –ê–ö–¶–ò–Ø</b> 10.06 –ø–æ—á—Ç—ã –≤—Å–µ–≥–æ –ø–æ 6 —Ä—É–±–ª–µ–π –±—É–¥—É—Ç! üò±`;

  const options = {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: [
        [{ text: `üìÇ –ö–ê–¢–ï–ì–û–†–ò–ò üìÇ`, callback_data: 'categories' }],
        [{ text: 'üõí –ú–û–ò –ü–û–ö–£–ü–ö–ò üõí', callback_data: 'my_purchases' }],
        [{ text: 'üë• –†–ï–§–ï–†–ê–õ–ö–ê üë•', callback_data: 'referral' }],
        [{ text: 'üÜò –ü–û–î–î–ï–†–ñ–ö–ê üÜò', callback_data: 'support' }]
      ]
    }
  };

  if (deletePrevious) {
    bot.sendMessage(chatId, '‚åõ –û–±–Ω–æ–≤–ª—è—é –º–µ–Ω—é...').then(msg => {
      setTimeout(() => bot.deleteMessage(chatId, msg.message_id), 300);
    });
  }

  return bot.sendPhoto(chatId, 'https://i.ibb.co/spcnyqTy/image-3.png', {
    caption: welcomeText,
    parse_mode: 'HTML',
    reply_markup: options.reply_markup
  });
}

// –ú–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∏
async function sendReferralMenu(chatId) {
  const usersCollection = await users();
  const user = await usersCollection.findOne({ user_id: chatId });
  const referralCount = user?.referrals?.length || 0;
  const hasDiscount = !!user?.hasDiscount;
  const canGetUkBundle = !!user?.canGetUkBundle;
  const hasUkBundle = !!user?.hasUkBundle;

  const referralLink = generateReferralLink(chatId);

  const text = `üë• <b>–†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê</b>\n\n` +
    `üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n<code>${referralLink}</code>\n\n` +
    `üë§ <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π:</b> ${referralCount}\n\n` +
    `üéÅ <b>–ë–æ–Ω—É—Å—ã:</b>\n` +
    `‚Ä¢ –ó–∞ 5 –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö ‚Äî —Å–∫–∏–¥–∫–∞ 10% –Ω–∞ –≤—Å–µ –ø–æ–∫—É–ø–∫–∏${hasDiscount ? " (–∞–∫—Ç–∏–≤–Ω–∞ ‚úÖ)" : ""}\n` +
    `‚Ä¢ –ó–∞ 10 –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö ‚Äî –¥–æ—Å—Ç—É–ø –∫ —Å–≤—è–∑–∫–µ "–£–ö–†"${hasUkBundle ? " (–ø–æ–ª—É—á–µ–Ω–∞ ‚úÖ)" : canGetUkBundle ? " (–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å)" : ""}\n\n` +
    `üí∞ <b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> ${hasUkBundle ? '–°–≤—è–∑–∫–∞ "–£–ö–†" –ø–æ–ª—É—á–µ–Ω–∞' : canGetUkBundle ? '–ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–≤—è–∑–∫—É "–£–ö–†"' : hasDiscount ? '–î–æ—Å—Ç—É–ø–Ω–∞ —Å–∫–∏–¥–∫–∞ 10%' : '–ù–µ—Ç –±–æ–Ω—É—Å–æ–≤'}`;

  const buttons = [
    [{ text: 'üîó –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É', callback_data: 'copy_referral' }]
  ];

  if (canGetUkBundle && !hasUkBundle) {
    buttons.push([{ text: 'üéÅ –ü–û–õ–£–ß–ò–¢–¨ –°–í–Ø–ó–ö–£ "–£–ö–†"', callback_data: 'get_uk_bundle' }]);
  }

  buttons.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]);

  return bot.sendMessage(chatId, text, {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: buttons
    }
  });
}

// –õ–æ–≥–∏–∫–∞ –≤—ã–¥–∞—á–∏ —Å–≤—è–∑–∫–∏ –£–ö–†
async function handleUkBundle(chatId, user) {
  const usersCollection = await users();
  if (user.hasUkBundle) return bot.sendMessage(chatId, "–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤—è–∑–∫—É –£–ö–†!");
  if (!user.canGetUkBundle) return bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–∫–∏ –£–ö–†!");

  await usersCollection.updateOne(
    { user_id: chatId },
    { $set: { hasUkBundle: true } }
  );

  // –í—ã–¥–∞—á–∞ —Å–≤—è–∑–∫–∏ ‚Äî —Ç—É—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≤–∞—à–µ–π —Å–≤—è–∑–∫–∏ (–≤—ã–¥–∞—Ç—å –∫–ª—é—á/–¥–∞–Ω–Ω—ã–µ)
  await bot.sendMessage(chatId, 
    'üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–≤—è–∑–∫—É –£–ö–†</b>\n\n' +
    '–°–≤—è–∑–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n' +
    '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π!', {
    parse_mode: 'HTML'
  });

  await bot.sendMessage(config.adminId, 
    `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${user.username || '–±–µ–∑ username'} (ID: ${chatId}) –ø–æ–ª—É—á–∏–ª —Å–≤—è–∑–∫—É –£–ö–† –∑–∞ 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n` +
    `–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${user.referrals?.length || 0}`, {
    parse_mode: 'HTML'
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (—á–∞—Å—Ç—å, –æ—Ç–Ω–æ—Å—è—â–∞—è—Å—è –∫ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–µ)
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;
  try {
    const usersCollection = await users();
    await usersCollection.updateOne(
      { user_id: chatId },
      { $set: { last_seen: new Date() } }
    );

    if (data === 'referral') {
      await bot.deleteMessage(chatId, callbackQuery.message.message_id);
      return sendReferralMenu(chatId);
    }
    if (data === 'copy_referral') {
      const referralLink = generateReferralLink(chatId);
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!',
        show_alert: false
      });
      return bot.sendMessage(chatId, `üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n<code>${referralLink}</code>\n\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ–π —Å –¥—Ä—É–∑—å—è–º–∏!`, {
        parse_mode: 'HTML'
      });
    }
    if (data === 'get_uk_bundle') {
      const user = await usersCollection.findOne({ user_id: chatId });
      await handleUkBundle(chatId, user);
      return;
    }

    // ... –∑–¥–µ—Å—å –±—É–¥—É—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ callback-–∏ (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –æ–ø–ª–∞—Ç—ã, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —Ç.–¥.) ...

  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback:', err);
    bot.answerCallbackQuery(callbackQuery.id, {
      text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
      show_alert: true
    });
  }
});

// ...–¥–∞–ª–µ–µ –ø–æ–π–¥—É—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–µ–Ω—é, –ø–æ–∫—É–ø–∫–∏, –æ–ø–ª–∞—Ç—ã –∏ —Ç.–¥. ...
// --- –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ ---

// –ú–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async function sendCategoriesMenu(chatId) {
  const emailsCount = await (await emails()).countDocuments();
  const firstmailCount = await (await firstmails()).countDocuments();

  const text = `üìÇ <b>–ö–ê–¢–ï–ì–û–†–ò–ò</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:`;

  const options = {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: [
        [{ text: `üìß –ü–û–ß–¢–´ ICLOUD (${emailsCount}—à—Ç)`, callback_data: 'emails_category' }],
        [{ text: `üî• FIRSTMAIL (${firstmailCount}—à—Ç)`, callback_data: 'firstmail_category' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
      ]
    }
  };
  return bot.sendMessage(chatId, text, options);
}

// –ú–µ–Ω—é –ø–æ—á—Ç iCloud
async function sendEmailsMenu(chatId) {
  const emailsCount = await (await emails()).countDocuments();

  const text = `üìß <b>–ü–û–ß–¢–´ ICLOUD (${emailsCount}—à—Ç) üìß</b>\n\n` +
    `<b>–í –¥–∞–Ω–Ω–æ–º –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ:</b>\n` +
    `‚úÖ ‚Ä¢ –ü–æ–∫—É–ø–∞—Ç—å –ø–æ—á—Ç—ã\n` +
    `‚úÖ ‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –∫–æ–¥—ã –æ—Ç –ø–æ—á—Ç\n` +
    `üéâ <b>–ê–∫—Ü–∏—è!</b> –î–æ 11.06 –ø–æ—á—Ç—ã –≤—Å–µ–≥–æ –ø–æ 7 —Ä—É–±–ª–µ–π! üò±\n` +
    `<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–∞—Å—Ç—å</b>`;

  const options = {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üí∞ –ö–£–ü–ò–¢–¨ –ü–û–ß–¢–£ üí∞', callback_data: 'buy_email' }],
        [{ text: 'üîë –ü–û–õ–£–ß–ò–¢–¨ –ö–û–î üîë', callback_data: 'get_code' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_categories' }]
      ]
    }
  };

  return bot.sendMessage(chatId, text, options);
}

// –ú–µ–Ω—é FIRSTMAIL
async function sendFirstmailMenu(chatId) {
  const firstmailCount = await (await firstmails()).countDocuments();

  const text = `üî• <b>–ü–û–ß–¢–´ FIRSTMAIL (${firstmailCount}—à—Ç)</b>\n\n` +
    `<b>–í –¥–∞–Ω–Ω–æ–º –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ:</b>\n` +
    `‚úÖ ‚Ä¢ –ö—É–ø–∏—Ç—å –ø–æ—á—Ç—ã FIRSTMAIL –¥–ª—è —Å–ø–∞–º–∞\n\n` +
    `–¶–µ–Ω–∞: <b>6 —Ä—É–±–ª–µ–π</b> –∏–ª–∏ <b>0.08 USDT</b> –∑–∞ 1 –ø–æ—á—Ç—É\n\n` +
    `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

  const options = {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üí∞ –ö–£–ü–ò–¢–¨ –ü–û–ß–¢–£ FIRSTMAIL üí∞', callback_data: 'buy_firstmail' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_categories' }]
      ]
    }
  };

  return bot.sendMessage(chatId, text, options);
}

// –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—á—Ç iCloud
async function sendQuantityMenu(chatId) {
  const availableCount = await (await emails()).countDocuments();
  const maxAvailable = Math.min(availableCount, 10);

  const quantityButtons = [];
  for (let i = 1; i <= maxAvailable; i++) {
    quantityButtons.push({ text: `${i}`, callback_data: `quantity_${i}` });
  }

  const rows = [];
  for (let i = 0; i < quantityButtons.length; i += 5) {
    rows.push(quantityButtons.slice(i, i + 5));
  }
  rows.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_emails_menu' }]);

  const text = `üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—á—Ç, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏</b>\n\n` +
    `–î–æ—Å—Ç—É–ø–Ω–æ: <b>${maxAvailable}</b> –ø–æ—á—Ç\n` +
    `–¶–µ–Ω–∞: <b>7 —Ä—É–±–ª–µ–π</b> –∑–∞ 1 –ø–æ—á—Ç—É`;

  const options = {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: rows
    }
  };

  return bot.sendMessage(chatId, text, options);
}

// –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—á—Ç FIRSTMAIL
async function sendFirstmailQuantityMenu(chatId) {
  const availableCount = await (await firstmails()).countDocuments();
  const maxAvailable = Math.min(availableCount, 10);

  const quantityButtons = [];
  for (let i = 1; i <= maxAvailable; i++) {
    quantityButtons.push({ text: `${i}`, callback_data: `firstmail_quantity_${i}` });
  }

  const rows = [];
  for (let i = 0; i < quantityButtons.length; i += 5) {
    rows.push(quantityButtons.slice(i, i + 5));
  }
  rows.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'firstmail_category' }]);

  const text = `üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—á—Ç FIRSTMAIL, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏</b>\n\n` +
    `–î–æ—Å—Ç—É–ø–Ω–æ: <b>${maxAvailable}</b> –ø–æ—á—Ç\n` +
    `–¶–µ–Ω–∞: <b>6 —Ä—É–±–ª–µ–π</b> –∏–ª–∏ <b>0.08 USDT</b> –∑–∞ 1 –ø–æ—á—Ç—É`;

  const options = {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: rows
    }
  };

  return bot.sendMessage(chatId, text, options);
}

// –ú–µ–Ω—é –æ–ø–ª–∞—Ç—ã iCloud —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–∫—É
async function sendPaymentMenu(chatId, invoiceUrl, quantity) {
  const usersCollection = await users();
  const user = await usersCollection.findOne({ user_id: chatId });
  const hasDiscount = !!user?.hasDiscount;

  const baseAmount = 0.09 * quantity;
  const discount = hasDiscount ? baseAmount * 0.1 : 0;
  const totalAmount = (baseAmount - discount).toFixed(2);

  const text = `üí≥ <b>–û–ø–ª–∞—Ç–∞ ${quantity} –ø–æ—á—Ç(—ã)</b>\n\n` +
    (hasDiscount ? `üéâ <b>–í–∞—à–∞ —Å–∫–∏–¥–∫–∞ 10% –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!</b>\n` : '') +
    `–°—É–º–º–∞: <b>${totalAmount} USDT</b>\n\n` +
    `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:`;

  const options = {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: [
        [{ text: '‚úÖ –û–ü–õ–ê–¢–ò–¢–¨ –ß–ï–†–ï–ó CRYPTOBOT', url: invoiceUrl }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_quantity_menu' }]
      ]
    }
  };

  return bot.sendMessage(chatId, text, options);
}

// –ú–µ–Ω—é –æ–ø–ª–∞—Ç—ã FIRSTMAIL —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–∫—É
async function sendFirstmailPaymentMenu(chatId, invoiceUrl, quantity) {
  const usersCollection = await users();
  const user = await usersCollection.findOne({ user_id: chatId });
  const hasDiscount = !!user?.hasDiscount;

  const baseAmount = 0.082 * quantity;
  const discount = hasDiscount ? baseAmount * 0.1 : 0;
  const totalAmount = (baseAmount - discount).toFixed(2);

  const text = `üí≥ <b>–û–ø–ª–∞—Ç–∞ ${quantity} –ø–æ—á—Ç(—ã) FIRSTMAIL</b>\n\n` +
    (hasDiscount ? `üéâ <b>–í–∞—à–∞ —Å–∫–∏–¥–∫–∞ 10% –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!</b>\n` : '') +
    `–°—É–º–º–∞: <b>${totalAmount} USDT</b>\n\n` +
    `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:`;

  const options = {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: [
        [{ text: '‚úÖ –û–ü–õ–ê–¢–ò–¢–¨ –ß–ï–†–ï–ó CRYPTOBOT', url: invoiceUrl }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_firstmail_quantity_menu' }]
      ]
    }
  };

  return bot.sendMessage(chatId, text, options);
}

// –î–∞–ª–µ–µ –±—É–¥–µ—Ç log–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞ (—Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏), –ø–æ–∫—É–ø–∫–∏, –≤—ã–¥–∞—á–∏ –ø–æ—á—Ç, –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–æ–≤ –∏ —Ç.–¥.
// –ü–∏—à–∏ "–ø—Ä–æ–¥–æ–ª–∂–∞–π" ‚Äî –∏ —è –¥–∞–º —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫!
// --- –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ: —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–æ–≤ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏, –≤—ã–¥–∞—á–∞ –ø–æ—á—Ç, –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–æ–≤, –ø–æ–∫—É–ø–∫–∏ ---

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è iCloud (—Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏)
async function createInvoice(userId, quantity) {
  try {
    const usersCollection = await users();
    const user = await usersCollection.findOne({ user_id: userId });
    const hasDiscount = !!user?.hasDiscount;

    const baseAmount = 0.09 * quantity;
    const discount = hasDiscount ? baseAmount * 0.1 : 0;
    const totalAmount = (baseAmount - discount).toFixed(2);

    const transactionId = `buy_${userId}_${Date.now()}`;

    const response = await axios.post('https://pay.crypt.bot/api/createInvoice', {
      asset: 'USDT',
      amount: totalAmount,
      description: `–ü–æ–∫—É–ø–∫–∞ ${quantity} –ø–æ—á—Ç iCloud`,
      hidden_message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!',
      paid_btn_name: 'openBot',
      paid_btn_url: `https://t.me/${config.botUsername}`,
      payload: transactionId
    }, {
      headers: {
        'Crypto-Pay-API-Token': CRYPTOBOT_API_TOKEN,
        'Content-Type': 'application/json'
      }
    });

    await usersCollection.updateOne(
      { user_id: userId },
      { 
        $setOnInsert: { user_id: userId, emails: [] },
        $set: { [`transactions.${transactionId}`]: {
          invoiceId: response.data.result.invoice_id,
          quantity: quantity,
          status: 'pending',
          timestamp: Date.now(),
          discountApplied: hasDiscount
        }}
      },
      { upsert: true }
    );

    return response.data.result.pay_url;
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞:', err.response?.data || err.message);
    return null;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è FIRSTMAIL (—Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏)
async function createFirstmailInvoice(userId, quantity) {
  try {
    const usersCollection = await users();
    const user = await usersCollection.findOne({ user_id: userId });
    const hasDiscount = !!user?.hasDiscount;

    const baseAmount = 0.082 * quantity;
    const discount = hasDiscount ? baseAmount * 0.1 : 0;
    const totalAmount = (baseAmount - discount).toFixed(2);

    const transactionId = `buy_firstmail_${userId}_${Date.now()}`;

    const response = await axios.post('https://pay.crypt.bot/api/createInvoice', {
      asset: 'USDT',
      amount: totalAmount,
      description: `–ü–æ–∫—É–ø–∫–∞ ${quantity} –ø–æ—á—Ç FIRSTMAIL`,
      hidden_message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!',
      paid_btn_name: 'openBot',
      paid_btn_url: `https://t.me/${config.botUsername}`,
      payload: transactionId
    }, {
      headers: {
        'Crypto-Pay-API-Token': CRYPTOBOT_API_TOKEN,
        'Content-Type': 'application/json'
      }
    });

    await usersCollection.updateOne(
      { user_id: userId },
      { 
        $setOnInsert: { user_id: userId, firstmails: [] },
        $set: { [`firstmail_transactions.${transactionId}`]: {
          invoiceId: response.data.result.invoice_id,
          quantity: quantity,
          status: 'pending',
          timestamp: Date.now(),
          discountApplied: hasDiscount
        }}
      },
      { upsert: true }
    );

    return response.data.result.pay_url;
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞ FIRSTMAIL:', err.response?.data || err.message);
    return null;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã iCloud
async function checkPayment(invoiceId) {
  try {
    const response = await axios.get(`https://pay.crypt.bot/api/getInvoices?invoice_ids=${invoiceId}`, {
      headers: {
        'Crypto-Pay-API-Token': CRYPTOBOT_API_TOKEN
      }
    });
    return response.data.result.items[0];
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã:', err);
    return null;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã FIRSTMAIL
async function checkFirstmailPayment(invoiceId) {
  try {
    const response = await axios.get(`https://pay.crypt.bot/api/getInvoices?invoice_ids=${invoiceId}`, {
      headers: {
        'Crypto-Pay-API-Token': CRYPTOBOT_API_TOKEN
      }
    });
    return response.data.result.items[0];
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã FIRSTMAIL:', err);
    return null;
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π iCloud - –≤—ã–¥–∞—á–∞ –ø–æ—á—Ç
async function handleSuccessfulPayment(userId, transactionId) {
  const usersCollection = await users();
  const emailsCollection = await emails();

  const user = await usersCollection.findOne({ user_id: userId });
  if (!user || !user.transactions || !user.transactions[transactionId]) {
    return false;
  }
  const quantity = user.transactions[transactionId].quantity;

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ—á—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
  const emailsToSell = await emailsCollection.aggregate([
    { $sample: { size: quantity } }
  ]).toArray();

  if (emailsToSell.length < quantity) {
    await usersCollection.updateOne(
      { user_id: userId },
      { $set: { [`transactions.${transactionId}.status`]: 'failed' } }
    );
    await bot.sendMessage(userId, 
      `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ—á—Ç –≤ –ø—É–ª–µ\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @igor_Potekov`,
      { parse_mode: 'HTML' });
    return false;
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await usersCollection.updateOne(
    { user_id: userId },
    {
      $push: { emails: { $each: emailsToSell.map(e => e.email) } },
      $set: { 
        [`transactions.${transactionId}.status`]: 'completed',
        [`transactions.${transactionId}.emails`]: emailsToSell.map(e => e.email)
      }
    }
  );

  // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ –ø–æ—á—Ç—ã
  await emailsCollection.deleteMany({
    email: { $in: emailsToSell.map(e => e.email) }
  });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ
  await bot.sendMessage(userId,
    `üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –ø–æ—á—Ç—ã!</b>\n\n` +
    `–í–∞—à–∏ –ø–æ—á—Ç—ã —É–∫–∞–∑–∞–Ω—ã –Ω–∏–∂–µ:`,
    { parse_mode: 'HTML' });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –ø–æ—á—Ç—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
  for (const email of emailsToSell) {
    await bot.sendMessage(userId, email.email);
  }

  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –º–µ–Ω—é –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–æ–≤
  await sendMyIcloudsMenu(userId);

  return true;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã FIRSTMAIL - –≤—ã–¥–∞—á–∞ firstmail-–ø–æ—á—Ç
async function handleSuccessfulFirstmailPayment(userId, transactionId) {
  const usersCollection = await users();
  const firstmailsCollection = await firstmails();

  const user = await usersCollection.findOne({ user_id: userId });
  if (!user || !user.firstmail_transactions || !user.firstmail_transactions[transactionId]) {
    return false;
  }

  const quantity = user.firstmail_transactions[transactionId].quantity;
  const firstmailsToSell = await firstmailsCollection.aggregate([
    { $sample: { size: quantity } }
  ]).toArray();

  if (firstmailsToSell.length < quantity) {
    await usersCollection.updateOne(
      { user_id: userId },
      { $set: { [`firstmail_transactions.${transactionId}.status`]: 'failed' } }
    );
    await bot.sendMessage(userId, 
      `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ—á—Ç FIRSTMAIL –≤ –ø—É–ª–µ\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @igor_Potekov`,
      { parse_mode: 'HTML' });
    return false;
  }

  await usersCollection.updateOne(
    { user_id: userId },
    {
      $push: { firstmails: { $each: firstmailsToSell.map(e => `${e.email}:${e.password}`) } },
      $set: { 
        [`firstmail_transactions.${transactionId}.status`]: 'completed',
        [`firstmail_transactions.${transactionId}.emails`]: firstmailsToSell.map(e => `${e.email}:${e.password}`)
      }
    }
  );

  await firstmailsCollection.deleteMany({
    email: { $in: firstmailsToSell.map(e => e.email) }
  });

  await bot.sendMessage(userId,
    `üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –ø–æ—á—Ç FIRSTMAIL!</b>\n\n` +
    `–í–∞—à–∏ –ø–æ—á—Ç—ã —É–∫–∞–∑–∞–Ω—ã –Ω–∏–∂–µ:`,
    { parse_mode: 'HTML' });

  for (const firstmail of firstmailsToSell) {
    await bot.sendMessage(userId, `${firstmail.email}:${firstmail.password}`);
  }

  return true;
}

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
setInterval(async () => {
  try {
    const usersCollection = await users();
    const usersWithTransactions = await usersCollection.find({
      "transactions": { $exists: true }
    }).toArray();

    for (const user of usersWithTransactions) {
      for (const [transactionId, transaction] of Object.entries(user.transactions)) {
        if (transaction.status === 'pending' && transaction.invoiceId) {
          const invoice = await checkPayment(transaction.invoiceId);
          if (invoice?.status === 'paid') {
            await handleSuccessfulPayment(user.user_id, transactionId);
          } else if (invoice?.status === 'expired') {
            await usersCollection.updateOne(
              { user_id: user.user_id },
              { $set: { [`transactions.${transactionId}.status`]: 'expired' } }
            );
          }
        }
      }
    }

    // FIRSTMAIL
    const usersWithFirstmail = await usersCollection.find({
      "firstmail_transactions": { $exists: true }
    }).toArray();

    for (const user of usersWithFirstmail) {
      for (const [transactionId, transaction] of Object.entries(user.firstmail_transactions)) {
        if (transaction.status === 'pending' && transaction.invoiceId) {
          const invoice = await checkFirstmailPayment(transaction.invoiceId);
          if (invoice?.status === 'paid') {
            await handleSuccessfulFirstmailPayment(user.user_id, transactionId);
          } else if (invoice?.status === 'expired') {
            await usersCollection.updateOne(
              { user_id: user.user_id },
              { $set: { [`firstmail_transactions.${transactionId}.status`]: 'expired' } }
            );
          }
        }
      }
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π:', err);
  }
}, 10000); // –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

// ...–ø–∏—à–∏ "–ø—Ä–æ–¥–æ–ª–∂–∞–π" –¥–ª—è –º–µ–Ω—é –º–æ–∏—Ö –ø–æ–∫—É–ø–æ–∫, –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–æ–≤, –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥...
// --- –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ: –º–µ–Ω—é –º–æ–∏—Ö –ø–æ–∫—É–ø–æ–∫, –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–æ–≤, –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã ---

// –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏ (iCloud + FIRSTMAIL)
async function sendMyPurchasesMenu(chatId) {
  const usersCollection = await users();
  const user = await usersCollection.findOne({ user_id: chatId });

  const hasIcloud = user && user.emails && user.emails.length > 0;
  const hasFirstmail = user && user.firstmails && user.firstmails.length > 0;

  const buttons = [];
  if (hasIcloud) buttons.push([{ text: 'üìß –ú–æ–∏ ICLOUD üìß', callback_data: 'my_iclouds' }]);
  if (hasFirstmail) buttons.push([{ text: 'üî• –ú–æ–∏ FIRSTMAIL üìß', callback_data: 'my_firstmails' }]);
  buttons.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]);

  if (!hasIcloud && !hasFirstmail) {
    return bot.sendMessage(chatId, 
      '‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫.\n' +
      '–ù–∞–∂–º–∏—Ç–µ "–ö–ê–¢–ï–ì–û–†–ò–ò" —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø–æ–∫—É–ø–∫—É', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üìÇ –ö–ê–¢–ï–ì–û–†–ò–ò üìÇ', callback_data: 'categories' }],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
        ]
      }
    });
  }

  return bot.sendMessage(chatId, 'üì¶ <b>–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:</b> üì¶', {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: buttons
    }
  });
}

// –ú–æ–∏ ICLOUD –ø–æ—á—Ç—ã (–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥)
async function sendMyIcloudsMenu(chatId) {
  const usersCollection = await users();
  const user = await usersCollection.findOne({ user_id: chatId });

  if (!user || !user.emails || user.emails.length === 0) {
    return bot.sendMessage(chatId, 
      '‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö ICLOUD.\n' +
      '–ö—É–ø–∏—Ç–µ –∏—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ ICLOUD!', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üìÇ –ö–ê–¢–ï–ì–û–†–ò–ò üìÇ', callback_data: 'categories' }],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
        ]
      }
    });
  }

  const buttons = user.emails.map(email => [{ text: email, callback_data: `email_${email}` }]);
  buttons.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]);

  return bot.sendMessage(chatId, 'üìß <b>–í–∞—à–∏ ICLOUD –ø–æ—á—Ç—ã:</b>üìß', {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: buttons
    }
  });
}

// –ú–æ–∏ FIRSTMAIL –ø–æ—á—Ç—ã
async function sendMyFirstmailsMenu(chatId) {
  const usersCollection = await users();
  const user = await usersCollection.findOne({ user_id: chatId });

  if (!user || !user.firstmails || user.firstmails.length === 0) {
    return bot.sendMessage(chatId, 
      '‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏—Ä—Å—Ç–º–∞–∏–ª–æ–≤.\n' +
      '–ö—É–ø–∏—Ç–µ –∏—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ FIRSTMAIL!', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üìÇ –ö–ê–¢–ï–ì–û–†–ò–ò üìÇ', callback_data: 'categories' }],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
        ]
      }
    });
  }

  const buttons = user.firstmails.map(emailpass => [{ text: emailpass, callback_data: `firstmail_show_${emailpass}` }]);
  buttons.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]);

  return bot.sendMessage(chatId, 'üî• <b>–í–∞—à–∏ FIRSTMAIL –ø–æ—á—Ç—ã:</b> üî•', {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: buttons
    }
  });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ –ø–æ—á—Ç—ã –¥–ª—è email
async function getCodeFromText(text, subject) {
  const textLower = text.toLowerCase();
  const subjectLower = subject?.toLowerCase() || '';

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∏—Å—å–º–æ –æ—Ç TikTok (–∏–ª–∏ TikTok Studio)
  const isTikTok = textLower.includes('tiktok') ||
      textLower.includes('—Ç–∏–∫—Ç–æ–∫') ||
      textLower.includes('—Ç–∏–∫-—Ç–æ–∫') ||
      subjectLower.includes('tiktok') ||
      subjectLower.includes('—Ç–∏–∫—Ç–æ–∫') ||
      subjectLower.includes('—Ç–∏–∫-—Ç–æ–∫') ||
      textLower.includes('tiktok studio') ||
      subjectLower.includes('tiktok studio');

  if (!isTikTok) return null;

  // –ò—â–µ–º –∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 4-8 —Ü–∏—Ñ—Ä
  const codeMatch = text.match(/\b\d{4,8}\b/);
  if (!codeMatch) return null;

  return codeMatch[0];
}

// –ü–æ–¥–¥–µ—Ä–∂–∫–∞
async function sendSupportMenu(chatId) {
  return bot.sendMessage(chatId, 
    'üõ†Ô∏è <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n' +
    '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É:\n' +
    '@igor_Potekov\n\n' +
    '–ú—ã —Ä–µ—à–∏–º –ª—é–±—É—é –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É!', {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
      ]
    }
  });
}

// --- –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã (–ø—Ä–∏–º–µ—Ä: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—á—Ç, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —Ä–∞—Å—Å—ã–ª–∫–∞) ---
// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—á—Ç iCloud
bot.onText(/\/add_emails (.+)/, async (msg, match) => {
  if (!isAdmin(msg.from.id)) return;

  const emailsCollection = await emails();
  const newEmails = match[1].split(',').map(e => e.trim()).filter(e => e);

  const result = await emailsCollection.insertMany(
    newEmails.map(email => ({ email })),
    { ordered: false }
  );
  const count = await emailsCollection.countDocuments();
  bot.sendMessage(msg.chat.id, 
    `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${result.insertedCount}\nüìä –í—Å–µ–≥–æ –ø–æ—á—Ç: ${count}`);
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—á—Ç FIRSTMAIL
bot.onText(/\/add_first (.+)/, async (msg, match) => {
  if (!isAdmin(msg.from.id)) return;

  const firstmailsCollection = await firstmails();
  const newFirstmails = match[1].split(',').map(e => e.trim()).filter(e => e);

  const toInsert = newFirstmails.map(str => {
    const [email, password] = str.split(':');
    return { email: email.trim(), password: (password || '').trim() };
  });

  const result = await firstmailsCollection.insertMany(toInsert, { ordered: false });
  const count = await firstmailsCollection.countDocuments();
  bot.sendMessage(msg.chat.id, 
    `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${result.insertedCount}\nüî• –í—Å–µ–≥–æ FIRSTMAIL: ${count}`);
});

// ...–ø–∏—à–∏ "–ø—Ä–æ–¥–æ–ª–∂–∞–π" –¥–ª—è –æ—Å—Ç–∞–≤—à–µ–π—Å—è —á–∞—Å—Ç–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!
// --- –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ: –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —Ä–∞—Å—Å—ã–ª–∫–∞, –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---

// –°—Ç–∞—Ç—É—Å –ø—É–ª–∞ iCloud
bot.onText(/\/pool_status/, async (msg) => {
  if (!isAdmin(msg.from.id)) return;

  const emailsCollection = await emails();
  const count = await emailsCollection.countDocuments();
  const first50 = await emailsCollection.find().limit(50).toArray();

  let message = `üìä –í—Å–µ–≥–æ –ø–æ—á—Ç: ${count}\n\n`;
  message += first50.map(e => e.email).join('\n');

  if (count > 200) message += '\n\n...–∏ –¥—Ä—É–≥–∏–µ (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 200)';

  bot.sendMessage(msg.chat.id, message);
});

// –°—Ç–∞—Ç—É—Å –ø—É–ª–∞ FIRSTMAIL
bot.onText(/\/firstmail_status/, async (msg) => {
  if (!isAdmin(msg.from.id)) return;

  const firstmailsCollection = await firstmails();
  const count = await firstmailsCollection.countDocuments();
  const first50 = await firstmailsCollection.find().limit(50).toArray();

  let message = `üî• –í—Å–µ–≥–æ FIRSTMAIL: ${count}\n\n`;
  message += first50.map(e => `${e.email}:${e.password}`).join('\n');

  if (count > 200) message += '\n\n...–∏ –¥—Ä—É–≥–∏–µ (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 200)';

  bot.sendMessage(msg.chat.id, message);
});

// –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
bot.onText(/\/ref_stats/, async (msg) => {
  if (!isAdmin(msg.from.id)) return;

  const usersCollection = await users();
  const topReferrers = await usersCollection.aggregate([
    { $project: { user_id: 1, referralsCount: { $size: { $ifNull: ["$referrals", []] } } } },
    { $sort: { referralsCount: -1 } },
    { $limit: 20 }
  ]).toArray();

  let message = `üìä <b>–¢–æ–ø 20 —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤</b>\n\n`;
  for (const user of topReferrers) {
    message += `üë§ ${user.user_id}: ${user.referralsCount} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`;
  }

  const totalUsers = await usersCollection.countDocuments();
  const usersWithReferrals = await usersCollection.countDocuments({ referrals: { $exists: true, $not: { $size: 0 } } });
  const totalReferrals = (await usersCollection.aggregate([
    { $project: { count: { $size: { $ifNull: ["$referrals", []] } } } },
    { $group: { _id: null, total: { $sum: "$count" } } }
  ]).toArray())[0]?.total || 0;

  message += `\n<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n`;
  message += `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n`;
  message += `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏: ${usersWithReferrals}\n`;
  message += `üîó –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${totalReferrals}\n`;
  message += `üéÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å–≤—è–∑–∫–æ–π –£–ö–†: ${await usersCollection.countDocuments({ hasUkBundle: true })}`;

  bot.sendMessage(msg.chat.id, message, { parse_mode: 'HTML' });
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ
bot.onText(/\/db_status/, async (msg) => {
  if (!isAdmin(msg.from.id)) return;

  try {
    const db = await connect();
    const stats = await db.command({ dbStats: 1 });
    const emailCount = await (await emails()).countDocuments();
    const firstmailCount = await (await firstmails()).countDocuments();

    bot.sendMessage(msg.chat.id, 
      `üõ†Ô∏è <b>–°—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>\n\n` +
      `‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ\n` +
      `üìä –†–∞–∑–º–µ—Ä –±–∞–∑—ã: ${(stats.dataSize / 1024).toFixed(2)} KB\n` +
      `üìß –ü–æ—á—Ç–æ–≤ –≤ –ø—É–ª–µ: ${emailCount}\n` +
      `üî• FIRSTMAIL –≤ –ø—É–ª–µ: ${firstmailCount}\n` +
      `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${await (await users()).countDocuments()}\n` +
      `üîó –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${(await (await users()).aggregate([
        { $project: { count: { $size: { $ifNull: ["$referrals", []] } } } },
        { $group: { _id: null, total: { $sum: "$count" } } }
      ]).toArray())[0]?.total || 0}`,
      { parse_mode: 'HTML' });
  } catch (e) {
    bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${e.message}`);
  }
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.onText(/\/user_stats/, async (msg) => {
  if (!isAdmin(msg.from.id)) return;

  const usersCollection = await users();
  const totalUsers = await usersCollection.countDocuments();
  const activeUsers = await usersCollection.countDocuments({
    last_seen: { $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) }
  });

  bot.sendMessage(msg.chat.id,
    `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n` +
    `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>${totalUsers}</b>\n` +
    `üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: <b>${activeUsers}</b>\n` +
    `üîó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏: <b>${await usersCollection.countDocuments({ referrals: { $exists: true, $not: { $size: 0 } } })}</b>\n\n` +
    `–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`,
    { parse_mode: 'HTML' }
  );

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const recentUsers = await usersCollection.find()
    .sort({ first_seen: -1 })
    .limit(5)
    .toArray();

  for (const user of recentUsers) {
    const userInfo = [
      `üë§ ID: <code>${user.user_id}</code>`,
      `üÜî @${user.username || '–Ω–µ—Ç'}`,
      `üìÖ –ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç: ${user.first_seen.toLocaleString()}`,
      `üîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: ${user.last_seen?.toLocaleString() || '–Ω–∏–∫–æ–≥–¥–∞'}`,
      `üîó –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${user.referrals?.length || 0}`,
      `üéÅ –°–≤—è–∑–∫–∞ –£–ö–†: ${user.hasUkBundle ? '–¥–∞' : '–Ω–µ—Ç'}`
    ].join('\n');

    await bot.sendMessage(msg.chat.id, userInfo, { parse_mode: 'HTML' });
  }
});

// –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
bot.onText(/\/broadcast/, async (msg) => {
  if (!isAdmin(msg.from.id)) {
    return bot.sendMessage(msg.chat.id, '‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º');
  }

  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
  const prompt = await bot.sendMessage(msg.chat.id, 'üì¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é):', {
    reply_markup: {
      force_reply: true
    }
  });

  // –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∞
  bot.onReplyToMessage(msg.chat.id, prompt.message_id, async (reply) => {
    const usersCollection = await users();
    const allUsers = await usersCollection.find({}).toArray();

    let successCount = 0;
    let failCount = 0;
    const startTime = Date.now();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    await bot.sendMessage(msg.chat.id, `‚è≥ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è ${allUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);

    if (reply.photo) {
      // –†–∞—Å—Å—ã–ª–∫–∞ —Ñ–æ—Ç–æ
      const photoId = reply.photo[reply.photo.length - 1].file_id;
      const caption = reply.caption || '';
      for (const user of allUsers) {
        try {
          await bot.sendPhoto(user.user_id, photoId, {
            caption: caption,
            parse_mode: 'HTML'
          });
          successCount++;
        } catch (e) {
          failCount++;
        }
        await new Promise(resolve => setTimeout(resolve, 100));
      }
    } else if (reply.text) {
      // –†–∞—Å—Å—ã–ª–∫–∞ —Ç–µ–∫—Å—Ç–∞
      for (const user of allUsers) {
        try {
          await bot.sendMessage(user.user_id, reply.text, {
            parse_mode: 'HTML'
          });
          successCount++;
        } catch (e) {
          failCount++;
        }
        await new Promise(resolve => setTimeout(resolve, 100));
      }
    } else if (reply.video) {
      // –†–∞—Å—Å—ã–ª–∫–∞ –≤–∏–¥–µ–æ
      const videoId = reply.video.file_id;
      const caption = reply.caption || '';
      for (const user of allUsers) {
        try {
          await bot.sendVideo(user.user_id, videoId, {
            caption: caption,
            parse_mode: 'HTML'
          });
          successCount++;
        } catch (e) {
          failCount++;
        }
        await new Promise(resolve => setTimeout(resolve, 100));
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    const timeSpent = Math.round((Date.now() - startTime) / 1000);
    await bot.sendMessage(msg.chat.id, 
      `üìä –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${timeSpent} —Å–µ–∫.\n\n` +
      `‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}\n` +
      `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: ${failCount}\n` +
      `üìå –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${allUsers.length}`);
  });
});

// –ë—ã—Å—Ç—Ä–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
bot.onText(/\/broadcast_text (.+)/, async (msg, match) => {
  if (!isAdmin(msg.from.id)) {
    return bot.sendMessage(msg.chat.id, '‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º');
  }

  const text = match[1];
  const usersCollection = await users();
  const allUsers = await usersCollection.find({}).toArray();

  let successCount = 0;
  let failCount = 0;
  const startTime = Date.now();

  await bot.sendMessage(msg.chat.id, `‚è≥ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è ${allUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);

  for (const user of allUsers) {
    try {
      await bot.sendMessage(user.user_id, text, {
        parse_mode: 'HTML'
      });
      successCount++;
    } catch (e) {
      failCount++;
    }
    await new Promise(resolve => setTimeout(resolve, 50));
  }

  const timeSpent = Math.round((Date.now() - startTime) / 1000);
  await bot.sendMessage(msg.chat.id, 
    `üìä –¢–µ–∫—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${timeSpent} —Å–µ–∫.\n\n` +
    `‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}\n` +
    `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: ${failCount}`);
});

// --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ ---
(async () => {
  try {
    if (process.env.RENDER_EXTERNAL_URL) {
      const webhookUrl = `${process.env.RENDER_EXTERNAL_URL}/webhook`;
      await bot.setWebHook(webhookUrl);
      console.log(`Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`);
    } else {
      console.log('Running in development mode');
    }

    app.listen(PORT, () => {
      console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log('üíé –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', err);
    process.exit(1);
  }
})();